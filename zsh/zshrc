# -*- mode: sh; sh-shell: zsh; -*-

WORDCHARS='*?_-.[]~&;!#$%^(){}<>'
HISTFILE=~/.histfile
HISTSIZE=2000
SAVEHIST=2000
setopt share_history hist_reduce_blanks hist_no_functions hist_ignore_space
setopt append_history histignorealldups dvorak
setopt nohashcmds autocd notify prompt_subst nobeep
bindkey -e
autoload edit-command-line && zle -N edit-command-line
bindkey '\ee' edit-command-line

# ZSH COMPLETION
autoload -U compinit && compinit
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' completer _complete _correct _complete:foo
zstyle ':completion:*:complete:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:foo:*' matcher-list 'm:{a-zA-Z}={A-Za-z} r:|[-_./]=* r:|=*'
zstyle ':completion:*:functions' ignored-patterns '_*'
hosts=(`hostname`)
zstyle '*' hosts $hosts
# use ~/.ssh/known_hosts for completion
[ -f "$HOME/.ssh/known_hosts" ] && \
    hosts=(${${${(f)"$(<$HOME/.ssh/known_hosts)"}%%\ *}%%,*}) && \
    zstyle ':completion:*:hosts' hosts $hosts

zle_highlight=(region:standout special:standout suffix:fg=red isearch:underline)

# Include aliases and hashes
[ -e ~/.zshalias  ] && source ~/.zshalias
[ -e ~/.zshhashes ] && source ~/.zshhashes

# vcs_info
autoload -U vcs_info
zstyle ':vcs_info:*' actionformats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
precmd () { vcs_info }

# Prompt
autoload -U colors && colors
EXITCODE="%(?. . [%?]%1v)"
JOBS="%(1j.%j .)"
PS2='`%_> '
PS3='?# '
PS4='+%N:%i:%_> '
PROMPT="%{$fg[cyan]%}${JOBS}%{$fg_bold[red]%}${debian_chroot:+($debian_chroot)}%n%{$fg[blue]%}@%m:%{$fg_no_bold[green]%}%50<...<%~%<<"'${vcs_info_msg_0_}'"%{$fg[red]%}${EXITCODE}%{$reset_color%}
%{$fg[red]%}%# %{$reset_color%}"

# Directory based profile, taken from grmlzshrc
CHPWD_PROFILE='default'
function chpwd_profiles() {
    local -x profile
    zstyle -s ":chpwd:profiles:${PWD}" profile profile || profile='default'
    if (( ${+functions[chpwd_profile_$profile]} )) ; then
        print "Switching to profile: $profile"
        chpwd_profile_${profile}
    fi
    CHPWD_PROFILE="${profile}"
    return 0
}
chpwd_functions=( ${chpwd_functions} chpwd_profiles )

zstyle ":chpwd:profiles:$HOME/zone2/mozilla(|/|/*)" profile mozilla
zstyle ":chpwd:profiles:$HOME/zone2/0xlab(|/|/*)"   profile 0xlab
zstyle ":chpwd:profiles:$HOME/zone2/debian(|/|/*)"  profile debian

function chpwd_profile_default() {
    # TODO: auto unset
    unset QUILT_PATCHES
    [ -e ~/.zshenv  ] && source ~/.zshenv
}

function chpwd_profile_0xlab() {
    chpwd_profile_default

    export GIT_AUTHOR_EMAIL="kanru@0xlab.org"
    export GIT_COMMITTER_EMAIL="kanru@0xlab.org"
}

function chpwd_profile_debian() {
    chpwd_profile_default

    export GIT_AUTHOR_EMAIL="koster@debian.org"
    export GIT_COMMITTER_EMAIL="koster@debian.org"
    export QUILT_PATCHES=debian/patches
}

function chpwd_profile_mozilla() {
    chpwd_profile_default
}

# For stupid emacs Tramp mode
if [ "$TERM" = "dumb" ]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  unfunction precmd
  unfunction preexec
  PS1='$ '
fi

# Recursively find the the toplevel Makefile or build.xml and call
# make(1) or ant(1) accordingly
function mk() {
    if [ -f Makefile ]; then
        make $@
    elif [ -f build.xml ]; then
        ant $@
    else
        local D=$PWD/..
        while ! [ -f $D/Makefile -o -f $D/build.xml ]; do
            D=$D/..
            if [ $(readlink -f $D) = "/" ]; then
                echo "Cannot find any Makefile or build.xml"
                return 1
            fi
        done
        if [ -f $D/Makefile ]; then
            make -C $D $@
        elif [ -f $D/build.xml ]; then
            ant -f $D/build.xml $@
        fi
    fi
}

# Usage: .. [level]
# Go up $level directories
function ..() {
    num=$1
    test $1 || num=1
    cd $(seq $num|xargs printf '../%.0s')
    i
}

# Usage: = [math expression]
function "="() { echo "$@" | bc -l; }
